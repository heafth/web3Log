区块链 链式数据结构 不可篡改性和不可伪造性 
所有的数据，存在于每一个节点上，且数据保持一致，要修改都修改
区块链 1.0 -- 数字货币 2.0 -- 智能合约 3.0--超越货币、经济和市场

  维度	                 公链	                      私链	                   联盟链
节点准入	          无门槛，任何人可加入	       严格授权，单一主体控制	      联盟内机构授权加入
去中心化程度	          完全去中心化	                完全中心化	          半去中心化（多主体共治）
共识参与者	          所有节点共同参与	           单一主体指定节点	         联盟内节点共同参与
效率	            低（节点多，共识慢）	        高（节点少，控制集中）	     中（节点数量适中）
典型应用	            比特币、以太坊	              企业内部数据管理	       跨境支付、供应链协同

共识算法 (就是分布式系统的 “投票规则”，让一群不可靠的节点，最终能就 “一件事” 达成相同的结论)
  PoW 通过一定的算法计算出一个哈希值，满足该网络中的一定条件，便挖矿成功
  PoS 就是让持币多的人，拿一部分币做抵押，然后让他继续负责挖币，成功概率大
  DPoS 投票出一定数量的“代表”，也称为见证人或出块人。这一过程类似于股东大会投票选董事会代表股东管理公司。

拜占庭容错
  比如一个队伍几个人他们本应该都做出同样的决定，比如要进攻都进攻，要撤退都撤退，但是他们之间是点到点告知自己的到底是同意进攻还是撤退，
万一中间有一个人是叛徒，或者几个人是叛徒，就可以存在故意捣乱的情况，造成大家误以为同意的人认为同意的人多，不同意的人以为不同意的人多，
最后部队就分散了，就出现严重的问题。

嵌入式数据库 (直接部署在自己的机器上而不是服务器)
  高效率：嵌入式数据库直接通过应用程序调用 API 进行数据操作，无需运行独立的数据引擎。
  体积小巧：最初为嵌入式系统设计，嵌入式数据库的体积较小，占用资源少，包括 ROM、RAM 和 CPU。
  功能全面：尽管体积小，但功能完备，包括日志管理、数据压缩、备份及恢复等。
  高可移植性：与关系型数据库相比，嵌入式数据库具有更好的兼容性，适用于多种软硬件平台

智能合约 
  区块链平台上 条件被满足时自动执行合约

区块链应用
 1保险理赔
  使用智能合约，只要满足理赔条件，即可自动执行保单理赔，无需投保人申请或保险公司批准。
 2跨境支付
  交易周期长、成本高和透明度低 支付可以绕过第三方支付机构
 3数字货币
  匿名性和安全性： 相比纸币，数字货币减少了匿名交易的风险，降低了伪造和洗钱的可能。
  需求匹配： 传统的电子支付系统通常与银行账户紧密相关，不能完全满足用户对匿名支付的需求。
  成本和便携性： 与纸币和硬币相比，数字货币的制造和流通成本更低，携带更加便利。
  数字货币使得货币创造、记账和流通的数据能够实时采集，并通过大数据等技术手段在数据脱敏后进行深入分析

价值互联网
  安全地促进价值的直接传输和交易，无需依赖传统的中介机构，提高交易效率，还能降低交易成本，并增强交易的透明度和安全性

共享经济
  解决了传统共享经济中存在的信任危机和中心化运作的问题

物联网和物流领域中的区块链应用
  有效降低物流成本，提高供应链管理的透明度和效率，并实现从生产到运输过程中每一步的追溯。

数字存证和版权领域
  有效地鉴定和验证文字、视频、音频等数字作品的原创性和所有权，确保作品权属的真实性和唯一性。

公益领域
  便于公众透明查看和社会监督

溯源、防伪与供应链方向
  溯源技术指的是追踪和记录商品或信息从源头到消费者的整个流转过程。这一过程通过详细记录每一次商品的流转，以及支持供应链金融服务等

去中心化存储方向
  1医疗应用 患者随时随地都能访问自己的医疗记录
  2DNS系统 区块链的共识机制确保用户获得的地址信息准确无误，从而防止用户被导向虚假网站和遭受诈骗

知名开源区块链项目
  1超级账本（Hyperledger） 它并不是一个区块链应用，而是一个包含构建区块链所需工具集合的项目；Fabric 是其核心实现
  2以太坊 (Ethereum) 以太坊是一个公链项目，也是由 Go 语言实现，同时它还催生了另一个高级语言 Solidity，专门用来写智能合约

两阶段提交
   第一阶段： 事务管理器 向各个节点发送请求 执行事务并要求回复是否可以提交事务。
   第二阶段： 当所有节点都回复yes的时候，执行提交命令，否则执行回滚命令，不管提交还是回滚最后 所有节点都要回复确认，随后事务标记完成

三阶段提交 其实就是把两阶段提交的第一阶段拆成两份
   第一阶段： 发送预执行的请求
   第二阶段： 节点将事务的 undo 和 redo 日志写入稳定存储后执行事务回复“Yes”或“No”
   第三阶段： 如果都回复成功则执行提交，如果失败或者超速则执行回滚

通信模型
   同步模型 即必须等待对方回复比如打电话必须等对方拿起电话才能通讯  所有通信延迟有明确的、预定义的上限，如果超过这个上限，直接认为对方节点故障（而非 “延迟”）
   异步模型 类似于发邮件，发送完了，不用等待对方回复，干自己的事 完全不设通信延迟上限。消息可能瞬间到达，也可能延迟几小时、几天，甚至永远丢失
   部分同步模型 类似于微信，发送完了消息，对方可能马上就看到并且回复，也可能很久都没看到 延迟没有永久的上限，但存在 “最终会稳定在某个上限内” 的特性。

FLP 定理 在一个异步通信网络中，只要存在一个故障节点，就不存在一种完美的共识算法可以正确地终止（使所有节点达成一致）
CAP 定理 一个系统不可能同时满足以下三个属性 强一致性 可用性 分区容错性

共识算法分类
  容错类型
    拜占庭容错共识算法：包括 PBFT、PoW（工作量证明）、PoS（权益证明）、DPoS（委托权益证明）等。这类算法能够在节点可能存在恶意行为的环境中维持网络的一致性和安全。
    非拜占庭容错共识算法：如 Paxos、Raft 等。这些算法假设节点基本诚实，主要解决的是因网络故障或节点失效导致的问题。
  算法确定性
    确定性共识算法：如 Paxos、Raft、PBFT 等。这些算法一旦达成共识，其决策就是最终的，不存在回退的可能性。
    概率性共识算法：如 PoW、部分 PoS 等。这类算法达成的共识可能会在未来某个时间点被回退，但这种概率随时间延长逐渐趋近于零。
  选主策略
    选举类共识算法：如 Raft、PBFT。这些算法通过节点间的投票机制来选举出块节点，选举出的节点可以在多轮中连续作为出块节点。
    证明类共识算法：如 PoW、PoS。这些算法要求节点通过展示其计算能力或持有的货币量等方式来赢得出块的权利，通常每轮选举的出块节点都是不同的，以增强系统的公平性和安全性。

传统分布式一致性算法
  Basic Paxos 主要处理单一决策值的一致性问题。
  Multi Paxos 扩展到连续的多值决策，提高了处理连续事务的效率。
  Raft 是基于 Multi Paxos 思想的变体，以其易理解性和易实现性而受到青睐。

POW算法
  通过此算法出题并广播给所有节点让所有节点进行计算，那个节点先计算出来，便奖励比特币
    
区块链共识算法
  公链项目，考虑节点规模和安全性。通常选择能够容忍拜占庭故障的共识算法，如 PoW、Pos、DPoS 等；
  联盟链和私链项目，更考虑高性能和低延迟。通常选择经典 PBFT、Raft 等。
