区块链 链式数据结构 不可篡改性和不可伪造性 
所有的数据，存在于每一个节点上，且数据保持一致，要修改都修改
区块链 1.0 -- 数字货币 2.0 -- 智能合约 3.0--超越货币、经济和市场

  维度	                 公链	                      私链	                   联盟链
节点准入	          无门槛，任何人可加入	       严格授权，单一主体控制	      联盟内机构授权加入
去中心化程度	          完全去中心化	                完全中心化	          半去中心化（多主体共治）
共识参与者	          所有节点共同参与	           单一主体指定节点	         联盟内节点共同参与
效率	            低（节点多，共识慢）	        高（节点少，控制集中）	     中（节点数量适中）
典型应用	            比特币、以太坊	              企业内部数据管理	       跨境支付、供应链协同

共识算法 (就是分布式系统的 “投票规则”，让一群不可靠的节点，最终能就 “一件事” 达成相同的结论)
  PoW 通过此算法出题并广播给所有节点让所有节点进行计算，那个节点先计算出来，便奖励比特币
  PoS 就是让持币多的人，拿一部分币做抵押，然后让他继续负责挖币，成功概率大
  DPoS 投票出一定数量的“代表”，也称为见证人或出块人。这一过程类似于股东大会投票选董事会代表股东管理公司。

拜占庭容错
  比如一个队伍几个人他们本应该都做出同样的决定，比如要进攻都进攻，要撤退都撤退，但是他们之间是点到点告知自己的到底是同意进攻还是撤退，
万一中间有一个人是叛徒，或者几个人是叛徒，就可以存在故意捣乱的情况，造成大家误以为同意的人认为同意的人多，不同意的人以为不同意的人多，
最后部队就分散了，就出现严重的问题。

嵌入式数据库 (直接部署在自己的机器上而不是服务器)
  高效率：嵌入式数据库直接通过应用程序调用 API 进行数据操作，无需运行独立的数据引擎。
  体积小巧：最初为嵌入式系统设计，嵌入式数据库的体积较小，占用资源少，包括 ROM、RAM 和 CPU。
  功能全面：尽管体积小，但功能完备，包括日志管理、数据压缩、备份及恢复等。
  高可移植性：与关系型数据库相比，嵌入式数据库具有更好的兼容性，适用于多种软硬件平台

智能合约 
  区块链平台上 条件被满足时自动执行合约

区块链应用
 1保险理赔
  使用智能合约，只要满足理赔条件，即可自动执行保单理赔，无需投保人申请或保险公司批准。
 2跨境支付
  交易周期长、成本高和透明度低 支付可以绕过第三方支付机构
 3数字货币
  匿名性和安全性： 相比纸币，数字货币减少了匿名交易的风险，降低了伪造和洗钱的可能。
  需求匹配： 传统的电子支付系统通常与银行账户紧密相关，不能完全满足用户对匿名支付的需求。
  成本和便携性： 与纸币和硬币相比，数字货币的制造和流通成本更低，携带更加便利。
  数字货币使得货币创造、记账和流通的数据能够实时采集，并通过大数据等技术手段在数据脱敏后进行深入分析

价值互联网
  安全地促进价值的直接传输和交易，无需依赖传统的中介机构，提高交易效率，还能降低交易成本，并增强交易的透明度和安全性

共享经济
  解决了传统共享经济中存在的信任危机和中心化运作的问题

物联网和物流领域中的区块链应用
  有效降低物流成本，提高供应链管理的透明度和效率，并实现从生产到运输过程中每一步的追溯。

数字存证和版权领域
  有效地鉴定和验证文字、视频、音频等数字作品的原创性和所有权，确保作品权属的真实性和唯一性。

公益领域
  便于公众透明查看和社会监督

溯源、防伪与供应链方向
  溯源技术指的是追踪和记录商品或信息从源头到消费者的整个流转过程。这一过程通过详细记录每一次商品的流转，以及支持供应链金融服务等

去中心化存储方向
  1医疗应用 患者随时随地都能访问自己的医疗记录
  2DNS系统 区块链的共识机制确保用户获得的地址信息准确无误，从而防止用户被导向虚假网站和遭受诈骗

知名开源区块链项目
  1超级账本（Hyperledger） 它并不是一个区块链应用，而是一个包含构建区块链所需工具集合的项目；Fabric 是其核心实现
  2以太坊 (Ethereum) 以太坊是一个公链项目，也是由 Go 语言实现，同时它还催生了另一个高级语言 Solidity，专门用来写智能合约

两阶段提交
   第一阶段： 事务管理器 向各个节点发送请求 执行事务并要求回复是否可以提交事务。
   第二阶段： 当所有节点都回复yes的时候，执行提交命令，否则执行回滚命令，不管提交还是回滚最后 所有节点都要回复确认，随后事务标记完成

三阶段提交 其实就是把两阶段提交的第一阶段拆成两份
   第一阶段： 发送预执行的请求
   第二阶段： 节点将事务的 undo 和 redo 日志写入稳定存储后执行事务回复“Yes”或“No”
   第三阶段： 如果都回复成功则执行提交，如果失败或者超速则执行回滚

通信模型
   同步模型 即必须等待对方回复比如打电话必须等对方拿起电话才能通讯  所有通信延迟有明确的、预定义的上限，如果超过这个上限，直接认为对方节点故障（而非 “延迟”）
   异步模型 类似于发邮件，发送完了，不用等待对方回复，干自己的事 完全不设通信延迟上限。消息可能瞬间到达，也可能延迟几小时、几天，甚至永远丢失
   部分同步模型 类似于微信，发送完了消息，对方可能马上就看到并且回复，也可能很久都没看到 延迟没有永久的上限，但存在 “最终会稳定在某个上限内” 的特性。

FLP 定理 在一个异步通信网络中，只要存在一个故障节点，就不存在一种完美的共识算法可以正确地终止（使所有节点达成一致）
CAP 定理 一个系统不可能同时满足以下三个属性 强一致性 可用性 分区容错性

共识算法分类
  容错类型
    拜占庭容错共识算法：包括 PBFT、PoW（工作量证明）、PoS（权益证明）、DPoS（委托权益证明）等。这类算法能够在节点可能存在恶意行为的环境中维持网络的一致性和安全。
    非拜占庭容错共识算法：如 Paxos、Raft 等。这些算法假设节点基本诚实，主要解决的是因网络故障或节点失效导致的问题。
  算法确定性
    确定性共识算法：如 Paxos、Raft、PBFT 等。这些算法一旦达成共识，其决策就是最终的，不存在回退的可能性。
    概率性共识算法：如 PoW、部分 PoS 等。这类算法达成的共识可能会在未来某个时间点被回退，但这种概率随时间延长逐渐趋近于零。
  选主策略
    选举类共识算法：如 Raft、PBFT。这些算法通过节点间的投票机制来选举出块节点，选举出的节点可以在多轮中连续作为出块节点。
    证明类共识算法：如 PoW、PoS。这些算法要求节点通过展示其计算能力或持有的货币量等方式来赢得出块的权利，通常每轮选举的出块节点都是不同的，以增强系统的公平性和安全性。

传统分布式一致性算法
  Basic Paxos 主要处理单一决策值的一致性问题。
  Multi Paxos 扩展到连续的多值决策，提高了处理连续事务的效率。
  Raft 是基于 Multi Paxos 思想的变体，以其易理解性和易实现性而受到青睐。
    
区块链共识算法
  公链项目，考虑节点规模和安全性。通常选择能够容忍拜占庭故障的共识算法，如 PoW、Pos、DPoS 等；
  联盟链和私链项目，更考虑高性能和低延迟。通常选择经典 PBFT、Raft 等。

PBFT 算法 又称实用拜占庭容错
  主要应用在节点较少，且要求高吞吐量的区块链系统中，如联盟链和私链，算法中主要运行三类基本协议：一致性协议、检查点协议和视图更换协议。


一、对称密码算法
 流密码以数据流的形式逐位或逐字节加密，而分组密码则将数据分成固定大小的块进行加密
 知名的对称密码算法包括：
  DES（Data Encryption Standard）： 较老的加密标准，现已被认为不够安全。
  3DES（Triple DES）： 是 DES 的一个更安全的变体，通过三次加密过程增强安全性。
  IDEA（International Data Encryption Algorithm）： 一种强大的加密算法，常用于商业加密软件。
  RC2, RC4, RC5： 由 Ron Rivest 设计的一系列加密算法，其中 RC4 尤其流行，虽然现在被认为存在安全性问题。
  Blowfish： 是一种块加密算法，设计用来替代 DES。
  AES（Advanced Encryption Standard）： 现代加密标准，提供了高级的安全性，是目前使用最广泛的加密算法之一。
  1. 流密码
  RC4：曾广泛用于 WEP 网络加密。
  SNOW 3G：在 3G 数据传输中用作加密算法。
  A5：用于 GSM 系统的加密。
  祖冲之序列密码：在 4G 通信中用于加密。

分组密码
 分组密码是一种将长明文序列切分为固定长度段后，对每个段分别进行加密的方法
分组密码工作模式
 分组密码工作模式不是一种加密算法，而是描述如何在一个加密算法中重复使用密钥的方法
总结：
 分组密码（如 AES、DES）：定义了 “单块加密的具体算法”（核心工具）。
 分组密码工作模式：定义了 “如何把单块加密算法组合起来，处理任意长度的数据”（使用工具的策略）。

对称密码算法小结
 对称密码算法的主要优势在于其开放性、低计算需求、快速加密速度和高加密效率 
 缺点是安全性高度依赖于其保存方式，如果密钥由多人知晓，泄露的风险显著增加

对称密码算法在区块链中的应用
 数字钱包中的私钥管理
 区块链网络层通信

二、非对称密码算法又称公钥加密算法
 使用一对密钥：一个公钥和一个私钥。这两个密钥具有互补性，即用其中一个密钥加密的信息，只能用另一个相应的密钥解密

三、Hash 函数
 任意长度的输入数据转换成固定长度输出的函数。这些输出通常表现为一个较短的、固定长度的值或摘要，常用于确保数据的完整性。
 哈希函数的特点是高效且能快速地处理大量数据，同时其输出不易被逆向工程还原原始输入信息
 常见 Hash 函数有 MD4/MD5、RipeMD-160、SHA 系列函数以及 SM3 国密算法
 区块链使用的是SHA-256 算法

四、PKI
 1.公钥基础设施（PKI）是一种综合性的框架，设计用于支持公钥加密和数字证书的管理。它包含了硬件、软件、人员、政策和程序等多个组成部分，
 涵盖密钥和数字证书的生成、管理、存储、分发以及撤销等全方位功能
 2.证书颁发机构（CA）是公钥基础设施（PKI）的信任基础。CA 负责发放数字证书、设置证书的有效期、管理证书吊销列表（CRL）以实现证书的吊销、
 管理用户密钥等任务。CA 掌管公钥的整个生命周期，涵盖签发、吊销和更新数字证书等各个环节。
 PKI 应用
  VPN（虚拟专用网络）：通过 PKI 实现安全的远程访问，利用数字证书验证用户身份，并建立加密通信通道。
  TLS（传输层安全协议）：保护互联网通信安全，基于 PKI 的数字证书进行服务器和客户端的身份验证，然后通过非对称加密完成密钥协商，确保数据传输的机密性和完整性。

五、Merkle 树
 Merkle 树，也称为哈希树，是一种用于存储哈希值的数据结构，原始大数据块被分割成多个小数据块以实现分布式下载，最终合成完整的大数据块。
 通过构造哈希列表，可以有效地校验多个小数据块的完整性
 一个区块内的merkle树会记录整个区块的所有交易，不是整个区块链的所有交易，具有验证交易真实性防止篡改交易结果的重要性
篡改底层交易（如 Alice 到 Bob 这笔交易），其哈希值会改变，由此向上计算的各层节点哈希值都会变化，导致最终与原本的根节点哈希值不匹配，从而能检测出数据被篡改。

六、数字签名技术
 数字签名技术利用私钥对数据进行加密运算，生成一串字符，以替代手写签名或印章。它用于确认消息来源，防止欺诈或消息伪造。

七、零知识证明（Zero—Knowledge Proof，ZKP）
 零知识证明（ZKP）是在 20 世纪 80 年代初提出的，它允许证明者向验证者证明自己拥有某个秘密，而不泄露该秘密本身，即向外界透露的「知识」为零。零知识证明分为交互式和非交互式两种类型
   1. 交互式零知识证明（Interactive Zero-Knowledge, IZK）
交互式零知识证明是指证明者和验证者双方按照一个协议，通过一系列交互，最终验证者能够得出一个明确的结论，即证明者是否掌握某个秘密。
   2. 非交互式零知识证明（Non-Interactive Zero-Knowledge, NIZK）
交互式零知识证明（IZK）协议依赖于验证者的随机尝试，需要证明者和验证者进行多次交互才能完成验证。而非交互式零知识证明（NIZK）将交互次数减少到一次，实现了离线证明和公开验证。

 区块链如何应用零知识证明
在比特币交易过程中，为验证一笔交易是否合法，实际上只需验证以下三件事：
 发送方确实拥有足够的资金。
 发送方转出的金额和接收方收到的金额一致。
 发送方的资金确实被销毁。
在整个证明过程中，矿工实际上并不关心具体的交易金额、发送者身份或接收者身份。矿工只关心系统中的资金是否守恒。Zcash（大零币）正是基于这一思路，实现了隐私交易。

Base58 编码方案
 相比于 Base64，Base58 去掉了 6 个易混淆的字符：数字 0、大写 O、小写 l、大写 I 以及 +/，以便在任何字体中都能肉眼区分这些字符。

比特币交易：（哈希算法的运用）
  发送者（如 A）、接收者（如 B）
  1. 发送者 A 的操作：生成可验证的交易凭证
   组合核心信息：将「A 获取该货币的上一次交易哈希值」+「接收者 B 的公钥（即 B 的收款地址）」按固定顺序拼接；
   计算哈希值：用 SHA-256 算法对上述拼接信息计算，得到一个唯一的 “组合哈希值”；
   数字签名：A 用自己的私钥对 “组合哈希值” 签名（相当于 A 的 “数字印章”，证明交易是 A 发起）；
   广播交易：A 将「上一次交易哈希值」「B 的公钥」「A 的签名」一起发送给 B，同时同步到区块链网络。
  2. 接收者 B 的验证：确认交易合法有效
   解密签名：B 用发送者 A 的公钥解密 A 的 “数字签名”，得到解密后的 “原始组合信息”（即 A 当初拼接的「上一次交易哈希值 + B 的公钥」）；
   重新计算哈希：B 按 A 完全相同的规则（相同顺序拼接、相同 SHA-256 算法），对解密得到的「上一次交易哈希值 + B 的公钥」重新计算哈希值，得到 “验证用哈希值”；
   比对确认：将 “验证用哈希值” 与 A 发来的「上一次交易哈希值」对比：
   若一致：证明交易未被篡改、是 A 真实发起，B 确认自己合法获得该货币；
   若不一致：交易存在篡改或伪造，B 拒绝认可该交易。
  注意：首次交易时对应创世块，无 “上一次交易哈希值”。创世块含初始设定等关键信息，发送者可用接收者公钥等处理交易，后续交易以此为基础形成交易链。

以太坊白皮书记录
 检查一个区块是否有效的算法，如以下范式所示：
  检查该区块引用的上一个区块是否存在且有效。
  检查该区块的时间戳是否大于上一个区块 [fn2]（注释编号）的时间戳并且在将来 2 小时以内
  检查区块上的工作量证明是否有效。
  令前一个区块末尾的态为 S[0]。
  假设 TX 是该区块的交易列表，其中包含 n 个交易。 对于 0...n-1 中的所有 i，如果有任何应用程序返回错误，退出并返回 false，请设置 S[i+1] = APPLY(S[i],TX[i])。
  返回 true，并将 S[n] 登记为该区块末尾的状态。

比特币是一个状态转换系统 状态转换函数 APPLY(S,TX) -> S' or ERROR
  举例
 未花币即 UTXO，使用规则如下：在比特币交易中，需用拥有者的 UTXO 来支付，这些 UTXO 总和要大于或等于支付金额。
比如 A 有两笔 UTXO，分别价值 3 比特币和 5 比特币，B 向 A 购买 4 比特币物品，A 可选择用价值 5 比特币的 UTXO 支付，
交易完成后，B 得到 4 比特币的新 UTXO，A 会收到 1 比特币找零的新 UTXO，同时旧的 UTXO 被消耗，且每笔交易都要通过状态转换函数验证 UTXO 使用的合法性 。


简化的支付验证 (SPV):
 解读1 允许用户不运行完整节点，仅通过拥有最长工作量证明链的区块头副本，向其他节点查询确认最长链并获取交易对应的默克尔分支来验证支付；
 若交易已链接到链中，说明被网络节点接受，后续追加区块会进一步确认，不过这种验证在诚实节点控制网络时可靠，被攻击者控制则易受伪造交易欺骗，此时可借助其他节点的无效区块警告，下载全区块和相关交易检查来应对。
 解读2 指轻量级客户端无需下载存储整个区块链，仅保存约 80 字节 / 块的区块头，利用默克尔树获取交易的默克尔路径，验证交易是否在区块中，
  同时通过验证最长工作量证明链确保区块链分支正确，可降低存储需求，快速验证交易 。
 
不同的nonce：
  hash 函数中的随机数 nonce：在哈希函数的应用场景里，加入 nonce 主要是为了 让输入的取值范围足够大，使输入更加随机且分布足够均匀。
    比如在工作量证明（PoW）机制的区块链挖矿中，矿工不断改变这个 nonce 值，对包含交易信息的区块进行哈希运算， 
    使得哈希结果满足一定的难度要求（例如哈希值前若干位为 0 ）。这是为了增加找到符合要求哈希值的难度和随机性，保障区块链的安全性和去中心化特性。
  以太坊账号中的计数器 nonce：它存在于以太坊账户中，目的是确保每笔交易只能被处理一次。以太坊中，每个账户都有一个 nonce 值，初始为 0，
    每发送一笔交易，nonce 值就会递增 1 。节点在验证交易时，会检查交易中的 nonce 值是否和发送方账户记录的 nonce 值一致，若不一致，交易将被拒绝，以此来防止交易重放攻击 。
    相当于这个nonce值记录了发送者发生了多少笔交易。这个nonce是账户交易次数的记录，未交易过的账户为0，交易一次加1，并不是每一次的交易初始值。

关于椭圆曲线算法：
   椭圆曲线算法是一种基于椭圆曲线数学原理设计的公钥密码算法，它通过利用椭圆曲线上点的运算性质，生成公钥和私钥，用于加密、签名等密码学应用，具有安全性高、计算效率较好等特点。
   A 用私钥基于椭圆曲线算法对交易签名，B 则用 A 的公钥依据椭圆曲线算法来验证签名的真实性。
   相当于 A和B都是 一个函数的变量 而这个函数就是 椭圆曲线算法

关于脚本 某文章中提到 “即使不对比特币协议进行扩展，它也能在一定程度上实现“智能合约”。 比特币的UTXO并非只能被公钥拥有，也可以被用基于堆栈的编程语言所编写的更加复杂的脚本所拥有。 ”
   其实脚本是对UTXO的控制并非拥有，这里使用拥有一词容易混淆。
  比特币系统的脚本语言存在一些严重的限制
   1、缺乏图灵完备性 - 也就是说，虽然比特币脚本语言支持一个很大的计算子集，但它基本上不支持所有计算。 缺少的主要类别是循环，为避免交易验证期间出现无限循环，但会导致脚本的空间效率非常低下
   2、价值盲 UTXO 脚本无法对可提取金额进行精细控制 普通交易时可以比较自由地决定金额分配，但由于比特币脚本的价值盲特性，它没办法灵活又精准地按需求去划分和分配金额，
  做不到像你说的那样，把一部分给 A，剩下合适的部分留给 B。
   3、缺少状态 UTXO 只能是已使用或未使用 没办法保存其他内部状态。这就使得一些需要多阶段、复杂状态变化的合约难以实现 比如多阶段期权合约，它可能涉及不同阶段的条件变化和金额操作，
  由于 UTXO 没有办法记录这些中间状态，实现起来就特别困难。
   4、UTXO 看不到区块链的数据，例如随机数、时间戳和上一个区块的哈希。

加密货币上建立高级应用的三种方法：建立一个新的区块链、在比特币区块链上使用脚本、在比特币区块链上建立元币协议

在以太坊中，术语“交易”用来指代已签名的数据包，数据包存储着将要从外部帐户发送的消息。 交易包含：
  1、消息接收者
  2、用于识别发送者身份的签名
  3、从发送者转账到接收者的以太币金额
  4、一个可选数据字段
  5、STARTGAS 值，表示允许交易运行的最大计算步骤数
  6、GASPRICE 值，表示发送者每个计算步骤支付的费用

交易费用 = 实际消耗的 Gas 数量 × GASPRICE ，实际消耗 Gas 数量≤STARTGAS 交易开始前会设定 STARTGAS 作为上限，
实际执行中，即使有步骤消耗多份 gas，只要总消耗达到 STARTGAS 上限，交易就会停止，所以实际消耗的 gas 数量还是不会超过 STARTGAS 这个预设值。


以太坊状态转换函数（注意与前面比特币的函数转换不同）
  1、检查交易格式是否正确（即具有正确数量的值）、签名是否有效以及 Nonce 值是否与发送者帐户中的 Nonce 值匹配。 若否，则返回错误。
  2、通过 STARTGAS * GASPRICE 计算出交易费，并从签名中确定发送地址。 从发送者的帐户余额中减去费用，并增加发送者的 nonce 值。 如果帐户余额不足，则返回错误。
  3、初始化 GAS = STARTGAS，并根据交易中的字节数量为每个字节扣除相应数量的燃料。
  4、将交易数值从发送者帐户转移至接收帐户。 如果接收帐户尚不存在，则创建此帐户。 如果接收帐户是合约，运行该合约的代码，直到代码运行结束或燃料耗尽。
     注意 新创建的账户是 以太坊系统 自动创建 的外部账户，没有密码，只有私钥，私钥由接收方掌握。
  5、如果由于发送者资金不足或者代码运行耗尽了燃料，而导致转账失败，则回滚除支付费用之外的所有状态变化，并将费用支付给矿工帐户。
     注意 在以太坊中，即便转账因资金不足失败，用于验证和处理交易的那部分 Gas 费用仍会被扣除，因为网络节点已消耗计算资源，不过未使用的 Gas 费用会退还 。
  6、否则，将所有剩余燃料的费用退还发送者，并把为所消耗燃料而支付的费用发送给矿工。


以太坊代码执行
  以太坊合约代码从程序计数器 0 处开始执行，不断重复当前操作并使计数器 + 1，形成无限循环。当遇到 STOP、RETURN 指令，或出现错误，
 又或者合约执行消耗完设定的 Gas 时，循环终止。每执行一条指令都消耗 Gas，若 Gas 耗尽，交易可能回滚，已消耗 Gas 不退还 。

对冲合约示例
  鉴于这一关键因素，对冲合约将如下所示：
  等待 A 方输入 1000 个以太币。
  等待 B 方输入 1000 个以太币。
  在存储中记录 1000 个以太币的美元价值（通过查询数据馈送合约计算得出），假设价值是 $x。
  30 天后，允许 A 或 B“重新激活”该合约，以便将价值 $x 的以太币（通过再次查询数据馈送合约获取新价格并且计算得出）发送给 A，剩余以太币发送给 B。

去中心化文件存储
  优点：降低存储成本，用户可出租硬盘获利；数据安全隐私性高，有加密和分布式存储；拓展区块链应用场景。
  缺点：存在技术风险，如节点故障影响数据完整性；性能可能受限，数据访问速度慢；面临法规政策不确定性风险 

去中心化自治组织 缩写DAO
  是基于区块链技术的组织形式，通过智能合约将组织规则编码在区块链上，实现自主运行。它没有中心化领导，成员靠代币共享权益与治理权，通过投票等参与决策，像个更公平民主、不受地域限制的虚拟社区
  去中心化自治组织 中 2/3 成员同意可更改代码，方式是将代码放入不同合约，通过存储合约调用地址来实现更改，利用代理合约，修改被调用方地址，让调用方从调用旧合约转为新合约，实现代码更新 。
  合约里的子句指的是 是合约里的条款，规定交易、操作等相关规则和流程。

叔块：在以太坊中，因网络延迟等，有些块未能及时被主链接纳，但又不是无效块，这些块就叫叔块，它们可获得一定奖励，也能帮助确认主链交易，增强区块链安全性和稳定性 。
GHOST 协议是以太坊中用于处理叔块的。简化版 GHOST 协议限制叔块为区块 B 的第 2 到 7 代祖先直 系子代等，这样做可简化计算有效叔块过程，还能激励矿工在主链挖矿 。

以太坊实现了一个简化版的 GHOST 协议，它仅仅深入七个层级。 具体而言，它的定义如下：
  1一个区块必须指定一个父块，并且必须指定零个或多个叔块
  2包含在区块 B 中的叔块必须具有以下属性：
   2.1它必须是区块 B 的第 k 代祖先的直系子代，其中 2 <= k <= 7。
   2.2它不能是 B 的祖先
   2.3叔块必须是有效的区块头，但不需要是之前验证过的甚至是有效的区块
   2.4叔块必须不同于前面区块中包含的所有叔块，并且不同于同一区块中包含的所有其他叔块（非双重包含）
 3对于区块 B 中的每个叔块 U，区块 B 的矿工获得额外 3.125% 的铸币奖励，而叔块 U 的矿工获得 93.75% 的标准铸币奖励。


矿工收录的每笔交易都需要由网络中的每个节点处理，因此绝大部分交易处理成本由第三方承担（即其他网络节点），而不是由决定是否收录交易的矿工承担。 因此，公地悲剧的问题很可能发生。

让矿工趋向于收录更少的交易，并且增加 NC（节点成本）；因此，这两种作用会相互抵消 一部分 （解释：交易少奖励可能少，但同时若NC增加，因处理交易少成本也可能降低，这一增一减在某些情况下会使矿工总体收益与成本的关系变化相互抵消部分影响）

图灵完备
 是计算理论概念，指系统或编程语言能模拟通用图灵机，具备通用计算能力，能执行任意可计算任务，像现代计算机和多数编程语言都是图灵完备的。

 以太坊虚拟机代码以两种方式实现循环。 首先，使用一个 JUMP 指令，允许程序跳回至代码中的前一个位置，还使用一个 JUMPI 指令进行条件跳转

 图灵不完备方案里，没有 JUMP 和 JUMPI 指令，限制了通过跳转实现复杂循环等功能，从而避免因图灵完备带来的一些风险，比如恶意无限循环攻击。

货币和发行
不同面值的名称
    1: wei      wei是最小单位
    1012：Szabo
    1015：finney
    1018：ETH   ETH就是以太币
  想对应的比特币BTC 最小单位是satoshi
  1面额设计的前瞻性：以太坊提前设定面额体系，直接规避了比特币因后期面额命名争议（如 “聪” 的普及过程）带来的用户认知和使用成本问题，体现了项目早期对 “用户友好性” 和 “标准化” 的考量。
  2发行模型的平衡逻辑：初始发行通过 “货币销售 + 定向分配” 兼顾筹资、早期贡献补偿和长期储备；后续通过 “永久性矿工年度分配” 保障网络安全（矿工是区块链网络的核心维护者），
 但需注意长期通胀问题（每年固定增发 0.26X，可能影响以太币的稀缺性，后续以太坊通过 “合并”（The Merge）转向 PoS 机制，对发行模型进行了调整，此总结为早期设计）。
  3数据关联性：表格中 “货币单位总量” 的增长（1.198X→1.458X→2.498X）直接源于矿工的年度分配（每年 0.26X），5 年后总量增长约 1.05 倍（2.498X-1.198X=1.3X，接近 0.26X×5=1.3X），数据逻辑一致，反映了发行模型的确定性。
  4准备金比例变化：“已支用的预售 / 售后准备金比例” 下降，并非准备金总量减少，而是因货币单位总量（分母）增长导致的比例稀释，体现了准备金作为 “长期资金” 的稳定性，而非短期一次性消耗。
 长期供应增长率（百分比）
    以太币长期供应增长率趋于零，相关模型有捐赠池和永久线性供应增长两个选项。捐赠池情况特殊，组织无动力支持以太币价值；永久线性供应增长模型能降低比特币财富集中风险，
  保障人们获取货币单位的公平性，还保留持有以太币的激励。同时，加密货币损失可模拟为年总供应量百分比，流通总供应量最终会稳定在年发行量除以损失率的数值。未来以太坊可能过渡到权益证明模型，
  若组织有变化，会开放 “社区合约” 规范候选版本创建，不符合的可能被分叉为兼容版本。

智能财产
  概念：智能财产指所有权通过比特币区块链及合约控制的财产，可包括实物财产或公司股份等。由 Nick Szabo 于 1994 年提出。
  应用示例 - 汽车贷款：债权人用密钥 k1 接收贷款还款，Tx1 交易涉及车所有权转回债务人及 L 硬币输出到 k1，
        但贷款未还完时交易无效。债务人花钱可增加 Tx1 输入以增值，输入总和达 L 且债务偿清时，车所有权重归债务人。
  技术要点：访问密钥有时间限制，设备需可信时间源处理其到期，可通过时间戳服务等方式，设备生成随机数配合签名解决时间源相关问题 。

智能合约
  通过构建与比特币交互的低信任协议，可以创建全新的产品
  智能财产是可以通过区块链进行原子交易和借出的财产。
  可转让虚拟财产是可以交易但不能复制的数字物品。
  代理是维护自己的钱包的自治程序，他们用它来购买服务器时间。金钱是由销售服务的代理商获得的。如果需求超过供应，代理商可以产生孩子，这些孩子要么生存，要么死亡，这取决于他们是否能获得足够的生意。
  分布式市场是实现点对点债券和股票交易的一种方式，使比特币能够发展成为国际金融体系的全面竞争对手。

    比特币交易有输入输出及关联脚本，可含签名；每笔交易有锁定时间，小于 5 亿可表示区块或时间，未达时交易挂起可替换，到达则为最终状态；
  交易输入有序列号，普通价值转移交易中序列号为 UNIT_MAX 时锁定时间通常为 0，未达锁定时间但序列号全是 UNIT_MAX，交易也视为最终事务；还介绍了 SIGHASH 标志几种模式及作用 。

    SIGHASH 标志用于比特币交易输入签名验证。SIGHASH_ALL 会对整个交易进行，验证时所有输入输出都得匹配；SIGHASH_NONE 只验证输入，且会忽略输出；SIGH_SINGLE 
  验证输入和对应输出。SIGHASH_ANYONECANPAY 可和前三种结合，比如结合 SIGHASH_ALL 时，只有一个输入可被签名并使用，能实现一些特殊交易需求。

安全创建合约有两种一般模式：
  第一种模式，交易可能部分完整、完全完整或者无效，然后传到p2p网络外。
  第二种模式，两笔交易，第一笔创建并签了合约（没有付钱）先不发出去，等第二笔合同同意把资金锁定后，先广播这笔，再广播第一笔。

公钥私钥
  比特币交易中：私钥用于签名交易，公钥用于验证签名。
  非对称加密中：可公钥加密数据私钥解密，也可用私钥加密实现数字签名，公钥验证 。

提供押金（用金钱买网站信誉值）
  1用户和网站先互给新公钥。
  2用户弄个交易存 10 比特币，要双方都签名，先不公开，用前面的密钥给网站。（秘钥指的是私钥不是前面的公钥）
  3用户把这个交易的哈希值发给网站。
  4网站再弄个交易，用掉用户存的那些比特币，设定 6 个月后才能完成交易。
  5没完成的交易发回给用户看看合不合适，没问题 6 个月后就能成，期间也能改。（此6个月跟4点的6个月是同一个6个月）
  6最后用户按顺序公开这两个交易 。
  总结：用户通过抵押这 10 个比特币一段时间，向网站证明自己的诚意，以建立信任关系，获取信誉，且在这段时间，这10 BTC 处于用户和网站都无法独立花费的状态，
若用户想提前关闭账户，网站创建新 TX2，重置 nLockTime 与输入序列号，双方重签后用户广播交易以提前终止合约并释放比特币。若 6 个月快到用户想保留账户，
可重新签约新 nLockTime（序号比之前高 1）并重新广播。但如果用户是滥用者，网站不许提前关闭合约，滥用过多还可提高押金规模或延长合约期限。


托管和争议调解
   大意：这里主要讲的是在交易双方互不信任时，通过引入第三方调解人，锁定硬币来保障交易。只有在客户与商家、或客户与调解人、或调解人与商家达成一致等特定情况下，这些锁定的硬币才能被使用 。
   1. 选定争议调解员
   2. 获取商家、调解员公钥k1,k2 ，自己创建新密钥（K3）
   3. 给商家发送调解员公钥k2 并验证归属
   4. 用输出脚本创建并广播交易，通过这些步骤锁定硬币
  现在硬币被锁定，只能通过以下方式使用：
   客户与商户同意（交易成功，或商户同意无需调解即可向客户退款）
   客户和调解员同意（交易失败，调解员站在客户一边，就像退款一样）
   调解员和商家同意（货物交付，商家尽管有争议，但仍获得客户的硬币）
