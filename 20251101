atomic.AddInt64(&counter, 1)
  保证对 counter 的 读取-修改-写入 这一整步操作 一次性完成，不会被其他协程打断。
  也就是不可分割（atomic），并发安全。
  不需要锁，就能保证多个协程累加时不丢失任何一次加法。

对比传统做法：（加锁确保同一时间只有一个协程可以修改 sum）
  lock.Lock()
  sum++
  lock.Unlock()
sum++ 实际上做了三步操作：
  1、读取 sum 的当前值
  2、对值 +1
  3、写回 sum
